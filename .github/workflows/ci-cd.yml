name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - 'feature/*'
      - 'release/*'
      - 'hotfix/*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Determine version increment
      id: version
      run: |
        BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
        if [[ "$BRANCH_NAME" == "master" ]]; then
          VERSION_INCREMENT="patch"
        elif [[ "$BRANCH_NAME" == feature/* ]]; then
          VERSION_INCREMENT="minor"
        elif [[ "$BRANCH_NAME" == release/* ]]; then
          VERSION_INCREMENT="major"
        elif [[ "$BRANCH_NAME" == hotfix/* ]]; then
          VERSION_INCREMENT="patch"
        else
          VERSION_INCREMENT="patch"
        fi
        echo "version_increment=$VERSION_INCREMENT" >> $GITHUB_ENV

    - name: Increment version based on branch type
      run: |
        current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        IFS='.' read -r -a versionParts <<< "$current_version"
        if [[ "$VERSION_INCREMENT" == "patch" ]]; then
          versionParts[2]=$((versionParts[2] + 1))
        elif [[ "$VERSION_INCREMENT" == "minor" ]]; then
          versionParts[1]=$((versionParts[1] + 1))
          versionParts[2]=0
        elif [[ "$VERSION_INCREMENT" == "major" ]]; then
          versionParts[0]=$((versionParts[0] + 1))
          versionParts[1]=0
          versionParts[2]=0
        fi
        new_version="${versionParts[0]}.${versionParts[1]}.${versionParts[2]}"
        if [ "$new_version" != "$current_version" ]; then
          echo "Current version: $current_version"
          echo "New version: $new_version"
          mvn versions:set -DnewVersion=$new_version
          echo "new_version=$new_version" >> $GITHUB_ENV
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git commit -am "Bump version to $new_version"
          git push
        else
          echo "Version remains unchanged: $new_version"
        fi

    - name: Build with Maven
      run: mvn clean package

    - name: Run tests
      run: mvn test

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/simple-java-maven-app:${{ env.new_version }} .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/simple-java-maven-app:${{ env.new_version }}

    - name: Extract JAR from Docker image
      run: |
        CONTAINER_ID=$(docker create ${{ secrets.DOCKERHUB_USERNAME }}/simple-java-maven-app:${{ env.new_version }})
        docker cp $CONTAINER_ID:/app/app.jar ./app.jar
        docker rm $CONTAINER_ID

    - name: Push JAR to GitHub Repository
      env:
        PAT_GITLAB_ACTION: ${{ secrets.PAT_GITLAB_ACTION }}
      run: |
        if [ ! -d java-project-semver-artifact ]; then
          git clone https://x-access-token:${{ secrets.PAT_GITLAB_ACTION }}@github.com/asdumitrescu/java-project-semver-artifact.git
        else
          cd java-project-semver-artifact
          git pull
          cd ..
        fi
        cp app.jar java-project-semver-artifact/
        cd java-project-semver-artifact
        git add app.jar
        git commit -m "Add JAR artifact version ${{ env.new_version }}"
        git push

    - name: Login to DockerHub
      run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    - name: Deploy Docker image to server
      if: github.ref == 'refs/heads/master'
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/simple-java-maven-app:${{ env.new_version }}
        DEPLOY_SERVER_USER: ${{ secrets.DEPLOY_SERVER_USER }}
        DEPLOY_SERVER_IP: ${{ secrets.DEPLOY_SERVER_IP }}
        DEPLOY_SERVER_KEY: ${{ secrets.DEPLOY_SERVER_KEY }}
      run: |
        ssh -o StrictHostKeyChecking=no -i ${{ env.DEPLOY_SERVER_KEY }} ${{ env.DEPLOY_SERVER_USER }}@${{ env.DEPLOY_SERVER_IP }} << EOF
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker pull $IMAGE_NAME
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 8080:8080 $IMAGE_NAME
        EOF


